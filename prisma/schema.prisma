generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Currency {
  id     String @id
  name   String
  symbol String
}

model Hotels {
  id           String  @id @default(uuid())
  country      String
  capital      String
  picture      String
  localisation String
  Rooms        Rooms[]
}

model Language {
  id   String @id
  name String
  flag String
}

model Options {
  id    String  @id @default(uuid())
  name  String
  Rooms Rooms[] @relation("OptionsToRooms")
}

model Rooms {
  id         String     @id @default(uuid())
  hotelId    String
  capacity   Int
  cost       Int
  pictures   String[]
  roomTypeId String?
  Hotels     Hotels     @relation(fields: [hotelId], references: [id])
  options    Options[]  @relation("OptionsToRooms")
  roomType   RoomTypes? @relation(fields: [roomTypeId], references: [id])
}

model RoomTypes {
  id          String  @id @default(uuid())
  name        String
  description String?
  capacity    Int
  basePrice   Float
  Rooms       Rooms[]
}

model Session {
  id           String   @id @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @map("_id")
  name               String
  firstname          String
  country            String
  phoneNumber        String
  email              String              @unique
  hashedPassword     String? // Nouveau champ
  emailVerified      DateTime?
  Account            Account[]
  Session            Session[]
  verificationTokens VerificationToken[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model VerificationToken {
  id      String   @id @map("_id")
  token   String   @unique
  expires DateTime
  roomId  String
  userId  String? // Ajout de cette ligne
  user    User?    @relation(fields: [userId], references: [id])

  @@unique([id, token])
}
